---
layout: post
title:  "Logging"
---

It's extremely important to have logging in your application - things WILL go wrong, and the more insight you have into problems, the better.

Check out [Lithium's Logger.php](https://github.com/UnionOfRAD/lithium/blob/master/analysis/Logger.php) - this well-documented class is a good place to start to learn about logging in detail. We're going to add a few basic log messages to our app!

Good news, everybody! It's REALLY EASY to configure logging in Lithium!

OK first up we modify app/config/bootstrap.php and add an include:

{% highlight php %}
<?php
// ...

/**
 * This file contains configuration for logging
 */
require __DIR__ . '/bootstrap/logging.php';

// ...
{% endhighlight %}

Then, hit [http://staff-rolodex.localhost/staff](http://staff-rolodex.localhost/staff). You should see an error message:

<pre>
Warning: require(/var/www/staff-rolodex/app/config/bootstrap/logging.php): failed to open stream: No such file or directory in /var/www/staff-rolodex/app/config/bootstrap.php on line 62

Fatal error: require(): Failed opening required '/var/www/staff-rolodex/app/config/bootstrap/logging.php' (include_path='.:/usr/share/php:/usr/share/pear') in /var/www/staff-rolodex/app/config/bootstrap.php on line 62
</pre>

Now we create app/bootstrap/logging.php with these contents:

{% highlight php %}
<?php
use lithium\analysis\Logger;

Logger::config(array(
	'default' => array('adapter' => 'Syslog'),
	'problems' => array(
		'adapter' => 'File',
		'priority' => array('emergency', 'alert', 'critical', 'error')
	)
));
{% endhighlight %}

Now, hit the URL [http://staff-rolodex.localhost/staff](http://staff-rolodex.localhost/staff) to trigger a log write.

Finally, from the terminal, let's have a look at our log file:

<pre>
$ cat app/resources/tmp/logs/alert.log
2013-12-25 10:47:58 Someone listed users...
</pre>

_Yes, I am writing this on Christmas day!_

> *Did something go wrong?* Make sure app/resources/tmp/logs exists and is writeable by your web user.

Right, so what did we do here? Well, we defined two logging destinations - one to the system log, for all logging, and the other, 'problems', to a File. Lithium's File logger will log to app/resources/tmp/logs/{message type}.log. Because we used Logger::alert, it created alert.log. If we used "error", it would write to "error.log". Notice also this line:

<pre>
		'priority' => array('emergency', 'alert', 'critical', 'error')
</pre>

here, we can see that the file logger is only "paying attention" to 4 types of log events.

# Over to you!

That was pretty straightforward, right? At this point, I suggest adding logging to the methods of our controller. Don't worry, I'll wait while you do :-)

# What else could we do with logging?

Back so soon? Great, well done!

In a production system, you might want to log to a database rather than a file - for example, if you have multiple front ends, you might not want to have to pick through each box's logs separately. Both have their advantages, of course - sometimes, it might be a single node that is exhibiting a problem. So, it's good to log locally, and also to have a shared log - perhaps to something like MongoDB or another database.
